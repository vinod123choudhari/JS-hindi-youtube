// ЁЯФ╖ рдкрд░рд┐рднрд╛рд╖рд╛ (Definition):
// Execution Context JavaScript рдХрд╛ рд╡рд╣ environment (рдкрд░рд┐рд╡реЗрд╢) рд╣реИ рдЬрд┐рд╕рдореЗрдВ рдХрд┐рд╕реА code рдХреЛ run (execute) рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред

// рдЬрдм рднреА JavaScript рдореЗрдВ рдХреЛрдИ code рдЪрд▓рддрд╛ рд╣реИ, рд╡рд╣ рдХрд┐рд╕реА рди рдХрд┐рд╕реА execution context рдореЗрдВ рд╣реА рдЪрд▓рддрд╛ рд╣реИред

// ЁЯФ╖ Execution Context рдХреЗ рдкреНрд░рдХрд╛рд░ (Types):
// тЬЕ Global Execution Context (GEC)

// тЬЕ Function Execution Context (FEC)

// тЬЕ Eval Execution Context (рдмрд╣реБрдд rarely рдпреВрдЬрд╝ рд╣реЛрддрд╛ рд╣реИ)

// ЁЯФ╕ 1. Global Execution Context (GEC)
// рдпрд╣ default execution context рд╣реЛрддрд╛ рд╣реИред

// рдЬрдм рдЖрдк рдХреЛрдИ рднреА JS рдлрд╛рдЗрд▓ рд░рди рдХрд░рддреЗ рд╣реИрдВ, рд╕рдмрд╕реЗ рдкрд╣рд▓реЗ рдпрд╣ рдмрдирд╛рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред

// рдЗрд╕рдореЗрдВ рд╕рднреА global variables рдФрд░ global functions рдбрд┐рдлрд╝рд╛рдЗрди рд╣реЛрддреЗ рд╣реИрдВред

// ЁЯУМ рдЙрджрд╛рд╣рд░рдг:

// javascript
// Copy
// Edit
// var a = 10;

// function greet() {
//   console.log("Hello!");
// }
// рдпрд╣рд╛рдВ a рдФрд░ greet() рджреЛрдиреЛрдВ global scope рдореЗрдВ рд╣реИрдВ, рдЗрд╕рд▓рд┐рдП рдпреЗ Global Execution Context рдореЗрдВ рдЖрддреЗ рд╣реИрдВред

// ЁЯФ╕ 2. Function Execution Context (FEC)
// рдЬрдм рдХреЛрдИ function call рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ, рдЙрд╕рдХреЗ рд▓рд┐рдП рдПрдХ рдирдпрд╛ execution context рдмрдирддрд╛ рд╣реИред

// рдпрд╣ local variables, parameters рдФрд░ inner functions рдХреЛ рд╕рдВрднрд╛рд▓рддрд╛ рд╣реИред

// ЁЯУМ рдЙрджрд╛рд╣рд░рдг:

// javascript
// Copy
// Edit
// function add(x, y) {
//   var result = x + y;
//   return result;
// }

// add(5, 10); // FEC рдмрдиреЗрдЧрд╛ рдЬрдм рдпреЗ call рд╣реЛрдЧрд╛
// рдЬрдм add() call рд╣реЛрдЧрд╛, рддрдм рдПрдХ рдирдпрд╛ FEC рдмрдиреЗрдЧрд╛ рдЬрд┐рд╕рдореЗрдВ x, y, рдФрд░ result рд╣реЛрдВрдЧреЗред

// ЁЯФБ Execution Context рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ?
// рд╣рд░ execution context рдХреЗ рджреЛ main phases рд╣реЛрддреЗ рд╣реИрдВ:

// ЁЯзк 1. Creation Phase (рдмрдирд╛рдиреЗ рдХреА рдкреНрд░рдХреНрд░рд┐рдпрд╛):
// Memory allocate рд╣реЛрддреА рд╣реИред

// Variables рдХреЛ undefined рдФрд░ functions рдХреЛ рдЙрдирдХреЗ definitions рдХреЗ рд╕рд╛рде memory рдореЗрдВ рд░рдЦрд╛ рдЬрд╛рддрд╛ рд╣реИред

// this keyword define рд╣реЛрддрд╛ рд╣реИред

// тЪЩя╕П 2. Execution Phase (рдЪрд▓рд╛рдиреЗ рдХреА рдкреНрд░рдХреНрд░рд┐рдпрд╛):
// Actual code line-by-line execute рд╣реЛрддрд╛ рд╣реИред

// Variables рдХреЛ actual values рдорд┐рд▓рддреА рд╣реИрдВред

// ЁЯУК Execution Stack (Call Stack):
// Execution contexts рдПрдХ stack рдореЗрдВ add рд╣реЛрддреЗ рд╣реИрдВ рдЬрд┐рд╕реЗ Call Stack рдХрд╣рддреЗ рд╣реИрдВред

// ЁЯУМ рдЙрджрд╛рд╣рд░рдг:

// javascript
// Copy
// Edit
// function one() {
//   two();
// }

// function two() {
//   console.log("Inside two");
// }

// one();
// ЁЯз▒ Call Stack flow:

// Global Execution Context тЮбя╕П

// one() рдХрд╛ FEC тЮбя╕П

// two() рдХрд╛ FEC

// рдЬрдм function рдХрд╛ рдХрд╛рдо рдЦрддреНрдо рд╣реЛ рдЬрд╛рддрд╛ рд╣реИ, рдЙрд╕рдХрд╛ execution context stack рд╕реЗ рд╣рдЯ рдЬрд╛рддрд╛ рд╣реИред